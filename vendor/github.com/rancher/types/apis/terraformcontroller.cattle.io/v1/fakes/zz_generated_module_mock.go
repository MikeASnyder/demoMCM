// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1 "github.com/rancher/terraform-controller/pkg/apis/terraformcontroller.cattle.io/v1"
	v1a "github.com/rancher/types/apis/terraformcontroller.cattle.io/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockModuleListerMockGet  sync.RWMutex
	lockModuleListerMockList sync.RWMutex
)

// Ensure, that ModuleListerMock does implement ModuleLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.ModuleLister = &ModuleListerMock{}

// ModuleListerMock is a mock implementation of ModuleLister.
//
//     func TestSomethingThatUsesModuleLister(t *testing.T) {
//
//         // make and configure a mocked ModuleLister
//         mockedModuleLister := &ModuleListerMock{
//             GetFunc: func(namespace string, name string) (*v1.Module, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.Module, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedModuleLister in code that requires ModuleLister
//         // and then make assertions.
//
//     }
type ModuleListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.Module, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.Module, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *ModuleListerMock) Get(namespace string, name string) (*v1.Module, error) {
	if mock.GetFunc == nil {
		panic("ModuleListerMock.GetFunc: method is nil but ModuleLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockModuleListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockModuleListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedModuleLister.GetCalls())
func (mock *ModuleListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockModuleListerMockGet.RLock()
	calls = mock.calls.Get
	lockModuleListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ModuleListerMock) List(namespace string, selector labels.Selector) ([]*v1.Module, error) {
	if mock.ListFunc == nil {
		panic("ModuleListerMock.ListFunc: method is nil but ModuleLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockModuleListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockModuleListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedModuleLister.ListCalls())
func (mock *ModuleListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockModuleListerMockList.RLock()
	calls = mock.calls.List
	lockModuleListerMockList.RUnlock()
	return calls
}

var (
	lockModuleControllerMockAddClusterScopedHandler sync.RWMutex
	lockModuleControllerMockAddHandler              sync.RWMutex
	lockModuleControllerMockEnqueue                 sync.RWMutex
	lockModuleControllerMockGeneric                 sync.RWMutex
	lockModuleControllerMockInformer                sync.RWMutex
	lockModuleControllerMockLister                  sync.RWMutex
	lockModuleControllerMockStart                   sync.RWMutex
	lockModuleControllerMockSync                    sync.RWMutex
)

// Ensure, that ModuleControllerMock does implement ModuleController.
// If this is not the case, regenerate this file with moq.
var _ v1a.ModuleController = &ModuleControllerMock{}

// ModuleControllerMock is a mock implementation of ModuleController.
//
//     func TestSomethingThatUsesModuleController(t *testing.T) {
//
//         // make and configure a mocked ModuleController
//         mockedModuleController := &ModuleControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.ModuleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.ModuleHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.ModuleLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedModuleController in code that requires ModuleController
//         // and then make assertions.
//
//     }
type ModuleControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.ModuleHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.ModuleHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.ModuleLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.ModuleHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.ModuleHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ModuleControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.ModuleHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ModuleControllerMock.AddClusterScopedHandlerFunc: method is nil but ModuleController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.ModuleHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockModuleControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockModuleControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedModuleController.AddClusterScopedHandlerCalls())
func (mock *ModuleControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.ModuleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.ModuleHandlerFunc
	}
	lockModuleControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockModuleControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ModuleControllerMock) AddHandler(ctx context.Context, name string, handler v1a.ModuleHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ModuleControllerMock.AddHandlerFunc: method is nil but ModuleController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.ModuleHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockModuleControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockModuleControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedModuleController.AddHandlerCalls())
func (mock *ModuleControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.ModuleHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.ModuleHandlerFunc
	}
	lockModuleControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockModuleControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *ModuleControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("ModuleControllerMock.EnqueueFunc: method is nil but ModuleController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockModuleControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockModuleControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedModuleController.EnqueueCalls())
func (mock *ModuleControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockModuleControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockModuleControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *ModuleControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("ModuleControllerMock.GenericFunc: method is nil but ModuleController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockModuleControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockModuleControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedModuleController.GenericCalls())
func (mock *ModuleControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockModuleControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockModuleControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *ModuleControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("ModuleControllerMock.InformerFunc: method is nil but ModuleController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockModuleControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockModuleControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedModuleController.InformerCalls())
func (mock *ModuleControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockModuleControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockModuleControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *ModuleControllerMock) Lister() v1a.ModuleLister {
	if mock.ListerFunc == nil {
		panic("ModuleControllerMock.ListerFunc: method is nil but ModuleController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockModuleControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockModuleControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedModuleController.ListerCalls())
func (mock *ModuleControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockModuleControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockModuleControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *ModuleControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("ModuleControllerMock.StartFunc: method is nil but ModuleController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockModuleControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockModuleControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedModuleController.StartCalls())
func (mock *ModuleControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockModuleControllerMockStart.RLock()
	calls = mock.calls.Start
	lockModuleControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *ModuleControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("ModuleControllerMock.SyncFunc: method is nil but ModuleController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockModuleControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockModuleControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedModuleController.SyncCalls())
func (mock *ModuleControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockModuleControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockModuleControllerMockSync.RUnlock()
	return calls
}

var (
	lockModuleInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockModuleInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockModuleInterfaceMockAddHandler                sync.RWMutex
	lockModuleInterfaceMockAddLifecycle              sync.RWMutex
	lockModuleInterfaceMockController                sync.RWMutex
	lockModuleInterfaceMockCreate                    sync.RWMutex
	lockModuleInterfaceMockDelete                    sync.RWMutex
	lockModuleInterfaceMockDeleteCollection          sync.RWMutex
	lockModuleInterfaceMockDeleteNamespaced          sync.RWMutex
	lockModuleInterfaceMockGet                       sync.RWMutex
	lockModuleInterfaceMockGetNamespaced             sync.RWMutex
	lockModuleInterfaceMockList                      sync.RWMutex
	lockModuleInterfaceMockObjectClient              sync.RWMutex
	lockModuleInterfaceMockUpdate                    sync.RWMutex
	lockModuleInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that ModuleInterfaceMock does implement ModuleInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.ModuleInterface = &ModuleInterfaceMock{}

// ModuleInterfaceMock is a mock implementation of ModuleInterface.
//
//     func TestSomethingThatUsesModuleInterface(t *testing.T) {
//
//         // make and configure a mocked ModuleInterface
//         mockedModuleInterface := &ModuleInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.ModuleHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.ModuleLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.ModuleHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.ModuleLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.ModuleController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.Module) (*v1.Module, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.Module, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.Module, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.ModuleList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.Module) (*v1.Module, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedModuleInterface in code that requires ModuleInterface
//         // and then make assertions.
//
//     }
type ModuleInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.ModuleHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.ModuleLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.ModuleHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.ModuleLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.ModuleController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.Module) (*v1.Module, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.Module, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.Module, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.ModuleList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.Module) (*v1.Module, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.ModuleHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.ModuleLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.ModuleHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.ModuleLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.Module
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.Module
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *ModuleInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.ModuleHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("ModuleInterfaceMock.AddClusterScopedHandlerFunc: method is nil but ModuleInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.ModuleHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockModuleInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockModuleInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedModuleInterface.AddClusterScopedHandlerCalls())
func (mock *ModuleInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.ModuleHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.ModuleHandlerFunc
	}
	lockModuleInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockModuleInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *ModuleInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.ModuleLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("ModuleInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but ModuleInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.ModuleLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockModuleInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockModuleInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedModuleInterface.AddClusterScopedLifecycleCalls())
func (mock *ModuleInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.ModuleLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.ModuleLifecycle
	}
	lockModuleInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockModuleInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *ModuleInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.ModuleHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("ModuleInterfaceMock.AddHandlerFunc: method is nil but ModuleInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.ModuleHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockModuleInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockModuleInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedModuleInterface.AddHandlerCalls())
func (mock *ModuleInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.ModuleHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.ModuleHandlerFunc
	}
	lockModuleInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockModuleInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *ModuleInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.ModuleLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("ModuleInterfaceMock.AddLifecycleFunc: method is nil but ModuleInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.ModuleLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockModuleInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockModuleInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedModuleInterface.AddLifecycleCalls())
func (mock *ModuleInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.ModuleLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.ModuleLifecycle
	}
	lockModuleInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockModuleInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *ModuleInterfaceMock) Controller() v1a.ModuleController {
	if mock.ControllerFunc == nil {
		panic("ModuleInterfaceMock.ControllerFunc: method is nil but ModuleInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockModuleInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockModuleInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedModuleInterface.ControllerCalls())
func (mock *ModuleInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockModuleInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockModuleInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *ModuleInterfaceMock) Create(in1 *v1.Module) (*v1.Module, error) {
	if mock.CreateFunc == nil {
		panic("ModuleInterfaceMock.CreateFunc: method is nil but ModuleInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.Module
	}{
		In1: in1,
	}
	lockModuleInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockModuleInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedModuleInterface.CreateCalls())
func (mock *ModuleInterfaceMock) CreateCalls() []struct {
	In1 *v1.Module
} {
	var calls []struct {
		In1 *v1.Module
	}
	lockModuleInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockModuleInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *ModuleInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("ModuleInterfaceMock.DeleteFunc: method is nil but ModuleInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockModuleInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockModuleInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedModuleInterface.DeleteCalls())
func (mock *ModuleInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockModuleInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockModuleInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *ModuleInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("ModuleInterfaceMock.DeleteCollectionFunc: method is nil but ModuleInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockModuleInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockModuleInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedModuleInterface.DeleteCollectionCalls())
func (mock *ModuleInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockModuleInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockModuleInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *ModuleInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("ModuleInterfaceMock.DeleteNamespacedFunc: method is nil but ModuleInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockModuleInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockModuleInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedModuleInterface.DeleteNamespacedCalls())
func (mock *ModuleInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockModuleInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockModuleInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *ModuleInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.Module, error) {
	if mock.GetFunc == nil {
		panic("ModuleInterfaceMock.GetFunc: method is nil but ModuleInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockModuleInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockModuleInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedModuleInterface.GetCalls())
func (mock *ModuleInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockModuleInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockModuleInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *ModuleInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.Module, error) {
	if mock.GetNamespacedFunc == nil {
		panic("ModuleInterfaceMock.GetNamespacedFunc: method is nil but ModuleInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockModuleInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockModuleInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedModuleInterface.GetNamespacedCalls())
func (mock *ModuleInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockModuleInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockModuleInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *ModuleInterfaceMock) List(opts v1b.ListOptions) (*v1a.ModuleList, error) {
	if mock.ListFunc == nil {
		panic("ModuleInterfaceMock.ListFunc: method is nil but ModuleInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockModuleInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockModuleInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedModuleInterface.ListCalls())
func (mock *ModuleInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockModuleInterfaceMockList.RLock()
	calls = mock.calls.List
	lockModuleInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *ModuleInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("ModuleInterfaceMock.ObjectClientFunc: method is nil but ModuleInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockModuleInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockModuleInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedModuleInterface.ObjectClientCalls())
func (mock *ModuleInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockModuleInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockModuleInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *ModuleInterfaceMock) Update(in1 *v1.Module) (*v1.Module, error) {
	if mock.UpdateFunc == nil {
		panic("ModuleInterfaceMock.UpdateFunc: method is nil but ModuleInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.Module
	}{
		In1: in1,
	}
	lockModuleInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockModuleInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedModuleInterface.UpdateCalls())
func (mock *ModuleInterfaceMock) UpdateCalls() []struct {
	In1 *v1.Module
} {
	var calls []struct {
		In1 *v1.Module
	}
	lockModuleInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockModuleInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *ModuleInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("ModuleInterfaceMock.WatchFunc: method is nil but ModuleInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockModuleInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockModuleInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedModuleInterface.WatchCalls())
func (mock *ModuleInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockModuleInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockModuleInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockModulesGetterMockModules sync.RWMutex
)

// Ensure, that ModulesGetterMock does implement ModulesGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.ModulesGetter = &ModulesGetterMock{}

// ModulesGetterMock is a mock implementation of ModulesGetter.
//
//     func TestSomethingThatUsesModulesGetter(t *testing.T) {
//
//         // make and configure a mocked ModulesGetter
//         mockedModulesGetter := &ModulesGetterMock{
//             ModulesFunc: func(namespace string) v1a.ModuleInterface {
// 	               panic("mock out the Modules method")
//             },
//         }
//
//         // use mockedModulesGetter in code that requires ModulesGetter
//         // and then make assertions.
//
//     }
type ModulesGetterMock struct {
	// ModulesFunc mocks the Modules method.
	ModulesFunc func(namespace string) v1a.ModuleInterface

	// calls tracks calls to the methods.
	calls struct {
		// Modules holds details about calls to the Modules method.
		Modules []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// Modules calls ModulesFunc.
func (mock *ModulesGetterMock) Modules(namespace string) v1a.ModuleInterface {
	if mock.ModulesFunc == nil {
		panic("ModulesGetterMock.ModulesFunc: method is nil but ModulesGetter.Modules was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockModulesGetterMockModules.Lock()
	mock.calls.Modules = append(mock.calls.Modules, callInfo)
	lockModulesGetterMockModules.Unlock()
	return mock.ModulesFunc(namespace)
}

// ModulesCalls gets all the calls that were made to Modules.
// Check the length with:
//     len(mockedModulesGetter.ModulesCalls())
func (mock *ModulesGetterMock) ModulesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockModulesGetterMockModules.RLock()
	calls = mock.calls.Modules
	lockModulesGetterMockModules.RUnlock()
	return calls
}
