// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fakes

import (
	context "context"
	sync "sync"

	controller "github.com/rancher/norman/controller"
	objectclient "github.com/rancher/norman/objectclient"
	v1 "github.com/rancher/terraform-controller/pkg/apis/terraformcontroller.cattle.io/v1"
	v1a "github.com/rancher/types/apis/terraformcontroller.cattle.io/v1"
	v1b "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

var (
	lockStateListerMockGet  sync.RWMutex
	lockStateListerMockList sync.RWMutex
)

// Ensure, that StateListerMock does implement StateLister.
// If this is not the case, regenerate this file with moq.
var _ v1a.StateLister = &StateListerMock{}

// StateListerMock is a mock implementation of StateLister.
//
//     func TestSomethingThatUsesStateLister(t *testing.T) {
//
//         // make and configure a mocked StateLister
//         mockedStateLister := &StateListerMock{
//             GetFunc: func(namespace string, name string) (*v1.State, error) {
// 	               panic("mock out the Get method")
//             },
//             ListFunc: func(namespace string, selector labels.Selector) ([]*v1.State, error) {
// 	               panic("mock out the List method")
//             },
//         }
//
//         // use mockedStateLister in code that requires StateLister
//         // and then make assertions.
//
//     }
type StateListerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(namespace string, name string) (*v1.State, error)

	// ListFunc mocks the List method.
	ListFunc func(namespace string, selector labels.Selector) ([]*v1.State, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// List holds details about calls to the List method.
		List []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Selector is the selector argument value.
			Selector labels.Selector
		}
	}
}

// Get calls GetFunc.
func (mock *StateListerMock) Get(namespace string, name string) (*v1.State, error) {
	if mock.GetFunc == nil {
		panic("StateListerMock.GetFunc: method is nil but StateLister.Get was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockStateListerMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStateListerMockGet.Unlock()
	return mock.GetFunc(namespace, name)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStateLister.GetCalls())
func (mock *StateListerMock) GetCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockStateListerMockGet.RLock()
	calls = mock.calls.Get
	lockStateListerMockGet.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StateListerMock) List(namespace string, selector labels.Selector) ([]*v1.State, error) {
	if mock.ListFunc == nil {
		panic("StateListerMock.ListFunc: method is nil but StateLister.List was just called")
	}
	callInfo := struct {
		Namespace string
		Selector  labels.Selector
	}{
		Namespace: namespace,
		Selector:  selector,
	}
	lockStateListerMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockStateListerMockList.Unlock()
	return mock.ListFunc(namespace, selector)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStateLister.ListCalls())
func (mock *StateListerMock) ListCalls() []struct {
	Namespace string
	Selector  labels.Selector
} {
	var calls []struct {
		Namespace string
		Selector  labels.Selector
	}
	lockStateListerMockList.RLock()
	calls = mock.calls.List
	lockStateListerMockList.RUnlock()
	return calls
}

var (
	lockStateControllerMockAddClusterScopedHandler sync.RWMutex
	lockStateControllerMockAddHandler              sync.RWMutex
	lockStateControllerMockEnqueue                 sync.RWMutex
	lockStateControllerMockGeneric                 sync.RWMutex
	lockStateControllerMockInformer                sync.RWMutex
	lockStateControllerMockLister                  sync.RWMutex
	lockStateControllerMockStart                   sync.RWMutex
	lockStateControllerMockSync                    sync.RWMutex
)

// Ensure, that StateControllerMock does implement StateController.
// If this is not the case, regenerate this file with moq.
var _ v1a.StateController = &StateControllerMock{}

// StateControllerMock is a mock implementation of StateController.
//
//     func TestSomethingThatUsesStateController(t *testing.T) {
//
//         // make and configure a mocked StateController
//         mockedStateController := &StateControllerMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, handler v1a.StateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, handler v1a.StateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             EnqueueFunc: func(namespace string, name string)  {
// 	               panic("mock out the Enqueue method")
//             },
//             GenericFunc: func() controller.GenericController {
// 	               panic("mock out the Generic method")
//             },
//             InformerFunc: func() cache.SharedIndexInformer {
// 	               panic("mock out the Informer method")
//             },
//             ListerFunc: func() v1a.StateLister {
// 	               panic("mock out the Lister method")
//             },
//             StartFunc: func(ctx context.Context, threadiness int) error {
// 	               panic("mock out the Start method")
//             },
//             SyncFunc: func(ctx context.Context) error {
// 	               panic("mock out the Sync method")
//             },
//         }
//
//         // use mockedStateController in code that requires StateController
//         // and then make assertions.
//
//     }
type StateControllerMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, handler v1a.StateHandlerFunc)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, handler v1a.StateHandlerFunc)

	// EnqueueFunc mocks the Enqueue method.
	EnqueueFunc func(namespace string, name string)

	// GenericFunc mocks the Generic method.
	GenericFunc func() controller.GenericController

	// InformerFunc mocks the Informer method.
	InformerFunc func() cache.SharedIndexInformer

	// ListerFunc mocks the Lister method.
	ListerFunc func() v1a.StateLister

	// StartFunc mocks the Start method.
	StartFunc func(ctx context.Context, threadiness int) error

	// SyncFunc mocks the Sync method.
	SyncFunc func(ctx context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Handler is the handler argument value.
			Handler v1a.StateHandlerFunc
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Handler is the handler argument value.
			Handler v1a.StateHandlerFunc
		}
		// Enqueue holds details about calls to the Enqueue method.
		Enqueue []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
		}
		// Generic holds details about calls to the Generic method.
		Generic []struct {
		}
		// Informer holds details about calls to the Informer method.
		Informer []struct {
		}
		// Lister holds details about calls to the Lister method.
		Lister []struct {
		}
		// Start holds details about calls to the Start method.
		Start []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Threadiness is the threadiness argument value.
			Threadiness int
		}
		// Sync holds details about calls to the Sync method.
		Sync []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *StateControllerMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, handler v1a.StateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("StateControllerMock.AddClusterScopedHandlerFunc: method is nil but StateController.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.StateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Handler:     handler,
	}
	lockStateControllerMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockStateControllerMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, handler)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedStateController.AddClusterScopedHandlerCalls())
func (mock *StateControllerMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Handler     v1a.StateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Handler     v1a.StateHandlerFunc
	}
	lockStateControllerMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockStateControllerMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *StateControllerMock) AddHandler(ctx context.Context, name string, handler v1a.StateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("StateControllerMock.AddHandlerFunc: method is nil but StateController.AddHandler was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Name    string
		Handler v1a.StateHandlerFunc
	}{
		Ctx:     ctx,
		Name:    name,
		Handler: handler,
	}
	lockStateControllerMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockStateControllerMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, handler)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedStateController.AddHandlerCalls())
func (mock *StateControllerMock) AddHandlerCalls() []struct {
	Ctx     context.Context
	Name    string
	Handler v1a.StateHandlerFunc
} {
	var calls []struct {
		Ctx     context.Context
		Name    string
		Handler v1a.StateHandlerFunc
	}
	lockStateControllerMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockStateControllerMockAddHandler.RUnlock()
	return calls
}

// Enqueue calls EnqueueFunc.
func (mock *StateControllerMock) Enqueue(namespace string, name string) {
	if mock.EnqueueFunc == nil {
		panic("StateControllerMock.EnqueueFunc: method is nil but StateController.Enqueue was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
	}{
		Namespace: namespace,
		Name:      name,
	}
	lockStateControllerMockEnqueue.Lock()
	mock.calls.Enqueue = append(mock.calls.Enqueue, callInfo)
	lockStateControllerMockEnqueue.Unlock()
	mock.EnqueueFunc(namespace, name)
}

// EnqueueCalls gets all the calls that were made to Enqueue.
// Check the length with:
//     len(mockedStateController.EnqueueCalls())
func (mock *StateControllerMock) EnqueueCalls() []struct {
	Namespace string
	Name      string
} {
	var calls []struct {
		Namespace string
		Name      string
	}
	lockStateControllerMockEnqueue.RLock()
	calls = mock.calls.Enqueue
	lockStateControllerMockEnqueue.RUnlock()
	return calls
}

// Generic calls GenericFunc.
func (mock *StateControllerMock) Generic() controller.GenericController {
	if mock.GenericFunc == nil {
		panic("StateControllerMock.GenericFunc: method is nil but StateController.Generic was just called")
	}
	callInfo := struct {
	}{}
	lockStateControllerMockGeneric.Lock()
	mock.calls.Generic = append(mock.calls.Generic, callInfo)
	lockStateControllerMockGeneric.Unlock()
	return mock.GenericFunc()
}

// GenericCalls gets all the calls that were made to Generic.
// Check the length with:
//     len(mockedStateController.GenericCalls())
func (mock *StateControllerMock) GenericCalls() []struct {
} {
	var calls []struct {
	}
	lockStateControllerMockGeneric.RLock()
	calls = mock.calls.Generic
	lockStateControllerMockGeneric.RUnlock()
	return calls
}

// Informer calls InformerFunc.
func (mock *StateControllerMock) Informer() cache.SharedIndexInformer {
	if mock.InformerFunc == nil {
		panic("StateControllerMock.InformerFunc: method is nil but StateController.Informer was just called")
	}
	callInfo := struct {
	}{}
	lockStateControllerMockInformer.Lock()
	mock.calls.Informer = append(mock.calls.Informer, callInfo)
	lockStateControllerMockInformer.Unlock()
	return mock.InformerFunc()
}

// InformerCalls gets all the calls that were made to Informer.
// Check the length with:
//     len(mockedStateController.InformerCalls())
func (mock *StateControllerMock) InformerCalls() []struct {
} {
	var calls []struct {
	}
	lockStateControllerMockInformer.RLock()
	calls = mock.calls.Informer
	lockStateControllerMockInformer.RUnlock()
	return calls
}

// Lister calls ListerFunc.
func (mock *StateControllerMock) Lister() v1a.StateLister {
	if mock.ListerFunc == nil {
		panic("StateControllerMock.ListerFunc: method is nil but StateController.Lister was just called")
	}
	callInfo := struct {
	}{}
	lockStateControllerMockLister.Lock()
	mock.calls.Lister = append(mock.calls.Lister, callInfo)
	lockStateControllerMockLister.Unlock()
	return mock.ListerFunc()
}

// ListerCalls gets all the calls that were made to Lister.
// Check the length with:
//     len(mockedStateController.ListerCalls())
func (mock *StateControllerMock) ListerCalls() []struct {
} {
	var calls []struct {
	}
	lockStateControllerMockLister.RLock()
	calls = mock.calls.Lister
	lockStateControllerMockLister.RUnlock()
	return calls
}

// Start calls StartFunc.
func (mock *StateControllerMock) Start(ctx context.Context, threadiness int) error {
	if mock.StartFunc == nil {
		panic("StateControllerMock.StartFunc: method is nil but StateController.Start was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Threadiness int
	}{
		Ctx:         ctx,
		Threadiness: threadiness,
	}
	lockStateControllerMockStart.Lock()
	mock.calls.Start = append(mock.calls.Start, callInfo)
	lockStateControllerMockStart.Unlock()
	return mock.StartFunc(ctx, threadiness)
}

// StartCalls gets all the calls that were made to Start.
// Check the length with:
//     len(mockedStateController.StartCalls())
func (mock *StateControllerMock) StartCalls() []struct {
	Ctx         context.Context
	Threadiness int
} {
	var calls []struct {
		Ctx         context.Context
		Threadiness int
	}
	lockStateControllerMockStart.RLock()
	calls = mock.calls.Start
	lockStateControllerMockStart.RUnlock()
	return calls
}

// Sync calls SyncFunc.
func (mock *StateControllerMock) Sync(ctx context.Context) error {
	if mock.SyncFunc == nil {
		panic("StateControllerMock.SyncFunc: method is nil but StateController.Sync was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	lockStateControllerMockSync.Lock()
	mock.calls.Sync = append(mock.calls.Sync, callInfo)
	lockStateControllerMockSync.Unlock()
	return mock.SyncFunc(ctx)
}

// SyncCalls gets all the calls that were made to Sync.
// Check the length with:
//     len(mockedStateController.SyncCalls())
func (mock *StateControllerMock) SyncCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	lockStateControllerMockSync.RLock()
	calls = mock.calls.Sync
	lockStateControllerMockSync.RUnlock()
	return calls
}

var (
	lockStateInterfaceMockAddClusterScopedHandler   sync.RWMutex
	lockStateInterfaceMockAddClusterScopedLifecycle sync.RWMutex
	lockStateInterfaceMockAddHandler                sync.RWMutex
	lockStateInterfaceMockAddLifecycle              sync.RWMutex
	lockStateInterfaceMockController                sync.RWMutex
	lockStateInterfaceMockCreate                    sync.RWMutex
	lockStateInterfaceMockDelete                    sync.RWMutex
	lockStateInterfaceMockDeleteCollection          sync.RWMutex
	lockStateInterfaceMockDeleteNamespaced          sync.RWMutex
	lockStateInterfaceMockGet                       sync.RWMutex
	lockStateInterfaceMockGetNamespaced             sync.RWMutex
	lockStateInterfaceMockList                      sync.RWMutex
	lockStateInterfaceMockObjectClient              sync.RWMutex
	lockStateInterfaceMockUpdate                    sync.RWMutex
	lockStateInterfaceMockWatch                     sync.RWMutex
)

// Ensure, that StateInterfaceMock does implement StateInterface.
// If this is not the case, regenerate this file with moq.
var _ v1a.StateInterface = &StateInterfaceMock{}

// StateInterfaceMock is a mock implementation of StateInterface.
//
//     func TestSomethingThatUsesStateInterface(t *testing.T) {
//
//         // make and configure a mocked StateInterface
//         mockedStateInterface := &StateInterfaceMock{
//             AddClusterScopedHandlerFunc: func(ctx context.Context, name string, clusterName string, sync v1a.StateHandlerFunc)  {
// 	               panic("mock out the AddClusterScopedHandler method")
//             },
//             AddClusterScopedLifecycleFunc: func(ctx context.Context, name string, clusterName string, lifecycle v1a.StateLifecycle)  {
// 	               panic("mock out the AddClusterScopedLifecycle method")
//             },
//             AddHandlerFunc: func(ctx context.Context, name string, sync v1a.StateHandlerFunc)  {
// 	               panic("mock out the AddHandler method")
//             },
//             AddLifecycleFunc: func(ctx context.Context, name string, lifecycle v1a.StateLifecycle)  {
// 	               panic("mock out the AddLifecycle method")
//             },
//             ControllerFunc: func() v1a.StateController {
// 	               panic("mock out the Controller method")
//             },
//             CreateFunc: func(in1 *v1.State) (*v1.State, error) {
// 	               panic("mock out the Create method")
//             },
//             DeleteFunc: func(name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the Delete method")
//             },
//             DeleteCollectionFunc: func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
// 	               panic("mock out the DeleteCollection method")
//             },
//             DeleteNamespacedFunc: func(namespace string, name string, options *v1b.DeleteOptions) error {
// 	               panic("mock out the DeleteNamespaced method")
//             },
//             GetFunc: func(name string, opts v1b.GetOptions) (*v1.State, error) {
// 	               panic("mock out the Get method")
//             },
//             GetNamespacedFunc: func(namespace string, name string, opts v1b.GetOptions) (*v1.State, error) {
// 	               panic("mock out the GetNamespaced method")
//             },
//             ListFunc: func(opts v1b.ListOptions) (*v1a.StateList, error) {
// 	               panic("mock out the List method")
//             },
//             ObjectClientFunc: func() *objectclient.ObjectClient {
// 	               panic("mock out the ObjectClient method")
//             },
//             UpdateFunc: func(in1 *v1.State) (*v1.State, error) {
// 	               panic("mock out the Update method")
//             },
//             WatchFunc: func(opts v1b.ListOptions) (watch.Interface, error) {
// 	               panic("mock out the Watch method")
//             },
//         }
//
//         // use mockedStateInterface in code that requires StateInterface
//         // and then make assertions.
//
//     }
type StateInterfaceMock struct {
	// AddClusterScopedHandlerFunc mocks the AddClusterScopedHandler method.
	AddClusterScopedHandlerFunc func(ctx context.Context, name string, clusterName string, sync v1a.StateHandlerFunc)

	// AddClusterScopedLifecycleFunc mocks the AddClusterScopedLifecycle method.
	AddClusterScopedLifecycleFunc func(ctx context.Context, name string, clusterName string, lifecycle v1a.StateLifecycle)

	// AddHandlerFunc mocks the AddHandler method.
	AddHandlerFunc func(ctx context.Context, name string, sync v1a.StateHandlerFunc)

	// AddLifecycleFunc mocks the AddLifecycle method.
	AddLifecycleFunc func(ctx context.Context, name string, lifecycle v1a.StateLifecycle)

	// ControllerFunc mocks the Controller method.
	ControllerFunc func() v1a.StateController

	// CreateFunc mocks the Create method.
	CreateFunc func(in1 *v1.State) (*v1.State, error)

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(name string, options *v1b.DeleteOptions) error

	// DeleteCollectionFunc mocks the DeleteCollection method.
	DeleteCollectionFunc func(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error

	// DeleteNamespacedFunc mocks the DeleteNamespaced method.
	DeleteNamespacedFunc func(namespace string, name string, options *v1b.DeleteOptions) error

	// GetFunc mocks the Get method.
	GetFunc func(name string, opts v1b.GetOptions) (*v1.State, error)

	// GetNamespacedFunc mocks the GetNamespaced method.
	GetNamespacedFunc func(namespace string, name string, opts v1b.GetOptions) (*v1.State, error)

	// ListFunc mocks the List method.
	ListFunc func(opts v1b.ListOptions) (*v1a.StateList, error)

	// ObjectClientFunc mocks the ObjectClient method.
	ObjectClientFunc func() *objectclient.ObjectClient

	// UpdateFunc mocks the Update method.
	UpdateFunc func(in1 *v1.State) (*v1.State, error)

	// WatchFunc mocks the Watch method.
	WatchFunc func(opts v1b.ListOptions) (watch.Interface, error)

	// calls tracks calls to the methods.
	calls struct {
		// AddClusterScopedHandler holds details about calls to the AddClusterScopedHandler method.
		AddClusterScopedHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Sync is the sync argument value.
			Sync v1a.StateHandlerFunc
		}
		// AddClusterScopedLifecycle holds details about calls to the AddClusterScopedLifecycle method.
		AddClusterScopedLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// ClusterName is the clusterName argument value.
			ClusterName string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.StateLifecycle
		}
		// AddHandler holds details about calls to the AddHandler method.
		AddHandler []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Sync is the sync argument value.
			Sync v1a.StateHandlerFunc
		}
		// AddLifecycle holds details about calls to the AddLifecycle method.
		AddLifecycle []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Name is the name argument value.
			Name string
			// Lifecycle is the lifecycle argument value.
			Lifecycle v1a.StateLifecycle
		}
		// Controller holds details about calls to the Controller method.
		Controller []struct {
		}
		// Create holds details about calls to the Create method.
		Create []struct {
			// In1 is the in1 argument value.
			In1 *v1.State
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// DeleteCollection holds details about calls to the DeleteCollection method.
		DeleteCollection []struct {
			// DeleteOpts is the deleteOpts argument value.
			DeleteOpts *v1b.DeleteOptions
			// ListOpts is the listOpts argument value.
			ListOpts v1b.ListOptions
		}
		// DeleteNamespaced holds details about calls to the DeleteNamespaced method.
		DeleteNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Options is the options argument value.
			Options *v1b.DeleteOptions
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// GetNamespaced holds details about calls to the GetNamespaced method.
		GetNamespaced []struct {
			// Namespace is the namespace argument value.
			Namespace string
			// Name is the name argument value.
			Name string
			// Opts is the opts argument value.
			Opts v1b.GetOptions
		}
		// List holds details about calls to the List method.
		List []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
		// ObjectClient holds details about calls to the ObjectClient method.
		ObjectClient []struct {
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// In1 is the in1 argument value.
			In1 *v1.State
		}
		// Watch holds details about calls to the Watch method.
		Watch []struct {
			// Opts is the opts argument value.
			Opts v1b.ListOptions
		}
	}
}

// AddClusterScopedHandler calls AddClusterScopedHandlerFunc.
func (mock *StateInterfaceMock) AddClusterScopedHandler(ctx context.Context, name string, clusterName string, sync v1a.StateHandlerFunc) {
	if mock.AddClusterScopedHandlerFunc == nil {
		panic("StateInterfaceMock.AddClusterScopedHandlerFunc: method is nil but StateInterface.AddClusterScopedHandler was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.StateHandlerFunc
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Sync:        sync,
	}
	lockStateInterfaceMockAddClusterScopedHandler.Lock()
	mock.calls.AddClusterScopedHandler = append(mock.calls.AddClusterScopedHandler, callInfo)
	lockStateInterfaceMockAddClusterScopedHandler.Unlock()
	mock.AddClusterScopedHandlerFunc(ctx, name, clusterName, sync)
}

// AddClusterScopedHandlerCalls gets all the calls that were made to AddClusterScopedHandler.
// Check the length with:
//     len(mockedStateInterface.AddClusterScopedHandlerCalls())
func (mock *StateInterfaceMock) AddClusterScopedHandlerCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Sync        v1a.StateHandlerFunc
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Sync        v1a.StateHandlerFunc
	}
	lockStateInterfaceMockAddClusterScopedHandler.RLock()
	calls = mock.calls.AddClusterScopedHandler
	lockStateInterfaceMockAddClusterScopedHandler.RUnlock()
	return calls
}

// AddClusterScopedLifecycle calls AddClusterScopedLifecycleFunc.
func (mock *StateInterfaceMock) AddClusterScopedLifecycle(ctx context.Context, name string, clusterName string, lifecycle v1a.StateLifecycle) {
	if mock.AddClusterScopedLifecycleFunc == nil {
		panic("StateInterfaceMock.AddClusterScopedLifecycleFunc: method is nil but StateInterface.AddClusterScopedLifecycle was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.StateLifecycle
	}{
		Ctx:         ctx,
		Name:        name,
		ClusterName: clusterName,
		Lifecycle:   lifecycle,
	}
	lockStateInterfaceMockAddClusterScopedLifecycle.Lock()
	mock.calls.AddClusterScopedLifecycle = append(mock.calls.AddClusterScopedLifecycle, callInfo)
	lockStateInterfaceMockAddClusterScopedLifecycle.Unlock()
	mock.AddClusterScopedLifecycleFunc(ctx, name, clusterName, lifecycle)
}

// AddClusterScopedLifecycleCalls gets all the calls that were made to AddClusterScopedLifecycle.
// Check the length with:
//     len(mockedStateInterface.AddClusterScopedLifecycleCalls())
func (mock *StateInterfaceMock) AddClusterScopedLifecycleCalls() []struct {
	Ctx         context.Context
	Name        string
	ClusterName string
	Lifecycle   v1a.StateLifecycle
} {
	var calls []struct {
		Ctx         context.Context
		Name        string
		ClusterName string
		Lifecycle   v1a.StateLifecycle
	}
	lockStateInterfaceMockAddClusterScopedLifecycle.RLock()
	calls = mock.calls.AddClusterScopedLifecycle
	lockStateInterfaceMockAddClusterScopedLifecycle.RUnlock()
	return calls
}

// AddHandler calls AddHandlerFunc.
func (mock *StateInterfaceMock) AddHandler(ctx context.Context, name string, sync v1a.StateHandlerFunc) {
	if mock.AddHandlerFunc == nil {
		panic("StateInterfaceMock.AddHandlerFunc: method is nil but StateInterface.AddHandler was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Name string
		Sync v1a.StateHandlerFunc
	}{
		Ctx:  ctx,
		Name: name,
		Sync: sync,
	}
	lockStateInterfaceMockAddHandler.Lock()
	mock.calls.AddHandler = append(mock.calls.AddHandler, callInfo)
	lockStateInterfaceMockAddHandler.Unlock()
	mock.AddHandlerFunc(ctx, name, sync)
}

// AddHandlerCalls gets all the calls that were made to AddHandler.
// Check the length with:
//     len(mockedStateInterface.AddHandlerCalls())
func (mock *StateInterfaceMock) AddHandlerCalls() []struct {
	Ctx  context.Context
	Name string
	Sync v1a.StateHandlerFunc
} {
	var calls []struct {
		Ctx  context.Context
		Name string
		Sync v1a.StateHandlerFunc
	}
	lockStateInterfaceMockAddHandler.RLock()
	calls = mock.calls.AddHandler
	lockStateInterfaceMockAddHandler.RUnlock()
	return calls
}

// AddLifecycle calls AddLifecycleFunc.
func (mock *StateInterfaceMock) AddLifecycle(ctx context.Context, name string, lifecycle v1a.StateLifecycle) {
	if mock.AddLifecycleFunc == nil {
		panic("StateInterfaceMock.AddLifecycleFunc: method is nil but StateInterface.AddLifecycle was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.StateLifecycle
	}{
		Ctx:       ctx,
		Name:      name,
		Lifecycle: lifecycle,
	}
	lockStateInterfaceMockAddLifecycle.Lock()
	mock.calls.AddLifecycle = append(mock.calls.AddLifecycle, callInfo)
	lockStateInterfaceMockAddLifecycle.Unlock()
	mock.AddLifecycleFunc(ctx, name, lifecycle)
}

// AddLifecycleCalls gets all the calls that were made to AddLifecycle.
// Check the length with:
//     len(mockedStateInterface.AddLifecycleCalls())
func (mock *StateInterfaceMock) AddLifecycleCalls() []struct {
	Ctx       context.Context
	Name      string
	Lifecycle v1a.StateLifecycle
} {
	var calls []struct {
		Ctx       context.Context
		Name      string
		Lifecycle v1a.StateLifecycle
	}
	lockStateInterfaceMockAddLifecycle.RLock()
	calls = mock.calls.AddLifecycle
	lockStateInterfaceMockAddLifecycle.RUnlock()
	return calls
}

// Controller calls ControllerFunc.
func (mock *StateInterfaceMock) Controller() v1a.StateController {
	if mock.ControllerFunc == nil {
		panic("StateInterfaceMock.ControllerFunc: method is nil but StateInterface.Controller was just called")
	}
	callInfo := struct {
	}{}
	lockStateInterfaceMockController.Lock()
	mock.calls.Controller = append(mock.calls.Controller, callInfo)
	lockStateInterfaceMockController.Unlock()
	return mock.ControllerFunc()
}

// ControllerCalls gets all the calls that were made to Controller.
// Check the length with:
//     len(mockedStateInterface.ControllerCalls())
func (mock *StateInterfaceMock) ControllerCalls() []struct {
} {
	var calls []struct {
	}
	lockStateInterfaceMockController.RLock()
	calls = mock.calls.Controller
	lockStateInterfaceMockController.RUnlock()
	return calls
}

// Create calls CreateFunc.
func (mock *StateInterfaceMock) Create(in1 *v1.State) (*v1.State, error) {
	if mock.CreateFunc == nil {
		panic("StateInterfaceMock.CreateFunc: method is nil but StateInterface.Create was just called")
	}
	callInfo := struct {
		In1 *v1.State
	}{
		In1: in1,
	}
	lockStateInterfaceMockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	lockStateInterfaceMockCreate.Unlock()
	return mock.CreateFunc(in1)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedStateInterface.CreateCalls())
func (mock *StateInterfaceMock) CreateCalls() []struct {
	In1 *v1.State
} {
	var calls []struct {
		In1 *v1.State
	}
	lockStateInterfaceMockCreate.RLock()
	calls = mock.calls.Create
	lockStateInterfaceMockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *StateInterfaceMock) Delete(name string, options *v1b.DeleteOptions) error {
	if mock.DeleteFunc == nil {
		panic("StateInterfaceMock.DeleteFunc: method is nil but StateInterface.Delete was just called")
	}
	callInfo := struct {
		Name    string
		Options *v1b.DeleteOptions
	}{
		Name:    name,
		Options: options,
	}
	lockStateInterfaceMockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	lockStateInterfaceMockDelete.Unlock()
	return mock.DeleteFunc(name, options)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedStateInterface.DeleteCalls())
func (mock *StateInterfaceMock) DeleteCalls() []struct {
	Name    string
	Options *v1b.DeleteOptions
} {
	var calls []struct {
		Name    string
		Options *v1b.DeleteOptions
	}
	lockStateInterfaceMockDelete.RLock()
	calls = mock.calls.Delete
	lockStateInterfaceMockDelete.RUnlock()
	return calls
}

// DeleteCollection calls DeleteCollectionFunc.
func (mock *StateInterfaceMock) DeleteCollection(deleteOpts *v1b.DeleteOptions, listOpts v1b.ListOptions) error {
	if mock.DeleteCollectionFunc == nil {
		panic("StateInterfaceMock.DeleteCollectionFunc: method is nil but StateInterface.DeleteCollection was just called")
	}
	callInfo := struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}{
		DeleteOpts: deleteOpts,
		ListOpts:   listOpts,
	}
	lockStateInterfaceMockDeleteCollection.Lock()
	mock.calls.DeleteCollection = append(mock.calls.DeleteCollection, callInfo)
	lockStateInterfaceMockDeleteCollection.Unlock()
	return mock.DeleteCollectionFunc(deleteOpts, listOpts)
}

// DeleteCollectionCalls gets all the calls that were made to DeleteCollection.
// Check the length with:
//     len(mockedStateInterface.DeleteCollectionCalls())
func (mock *StateInterfaceMock) DeleteCollectionCalls() []struct {
	DeleteOpts *v1b.DeleteOptions
	ListOpts   v1b.ListOptions
} {
	var calls []struct {
		DeleteOpts *v1b.DeleteOptions
		ListOpts   v1b.ListOptions
	}
	lockStateInterfaceMockDeleteCollection.RLock()
	calls = mock.calls.DeleteCollection
	lockStateInterfaceMockDeleteCollection.RUnlock()
	return calls
}

// DeleteNamespaced calls DeleteNamespacedFunc.
func (mock *StateInterfaceMock) DeleteNamespaced(namespace string, name string, options *v1b.DeleteOptions) error {
	if mock.DeleteNamespacedFunc == nil {
		panic("StateInterfaceMock.DeleteNamespacedFunc: method is nil but StateInterface.DeleteNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}{
		Namespace: namespace,
		Name:      name,
		Options:   options,
	}
	lockStateInterfaceMockDeleteNamespaced.Lock()
	mock.calls.DeleteNamespaced = append(mock.calls.DeleteNamespaced, callInfo)
	lockStateInterfaceMockDeleteNamespaced.Unlock()
	return mock.DeleteNamespacedFunc(namespace, name, options)
}

// DeleteNamespacedCalls gets all the calls that were made to DeleteNamespaced.
// Check the length with:
//     len(mockedStateInterface.DeleteNamespacedCalls())
func (mock *StateInterfaceMock) DeleteNamespacedCalls() []struct {
	Namespace string
	Name      string
	Options   *v1b.DeleteOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Options   *v1b.DeleteOptions
	}
	lockStateInterfaceMockDeleteNamespaced.RLock()
	calls = mock.calls.DeleteNamespaced
	lockStateInterfaceMockDeleteNamespaced.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *StateInterfaceMock) Get(name string, opts v1b.GetOptions) (*v1.State, error) {
	if mock.GetFunc == nil {
		panic("StateInterfaceMock.GetFunc: method is nil but StateInterface.Get was just called")
	}
	callInfo := struct {
		Name string
		Opts v1b.GetOptions
	}{
		Name: name,
		Opts: opts,
	}
	lockStateInterfaceMockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	lockStateInterfaceMockGet.Unlock()
	return mock.GetFunc(name, opts)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStateInterface.GetCalls())
func (mock *StateInterfaceMock) GetCalls() []struct {
	Name string
	Opts v1b.GetOptions
} {
	var calls []struct {
		Name string
		Opts v1b.GetOptions
	}
	lockStateInterfaceMockGet.RLock()
	calls = mock.calls.Get
	lockStateInterfaceMockGet.RUnlock()
	return calls
}

// GetNamespaced calls GetNamespacedFunc.
func (mock *StateInterfaceMock) GetNamespaced(namespace string, name string, opts v1b.GetOptions) (*v1.State, error) {
	if mock.GetNamespacedFunc == nil {
		panic("StateInterfaceMock.GetNamespacedFunc: method is nil but StateInterface.GetNamespaced was just called")
	}
	callInfo := struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}{
		Namespace: namespace,
		Name:      name,
		Opts:      opts,
	}
	lockStateInterfaceMockGetNamespaced.Lock()
	mock.calls.GetNamespaced = append(mock.calls.GetNamespaced, callInfo)
	lockStateInterfaceMockGetNamespaced.Unlock()
	return mock.GetNamespacedFunc(namespace, name, opts)
}

// GetNamespacedCalls gets all the calls that were made to GetNamespaced.
// Check the length with:
//     len(mockedStateInterface.GetNamespacedCalls())
func (mock *StateInterfaceMock) GetNamespacedCalls() []struct {
	Namespace string
	Name      string
	Opts      v1b.GetOptions
} {
	var calls []struct {
		Namespace string
		Name      string
		Opts      v1b.GetOptions
	}
	lockStateInterfaceMockGetNamespaced.RLock()
	calls = mock.calls.GetNamespaced
	lockStateInterfaceMockGetNamespaced.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StateInterfaceMock) List(opts v1b.ListOptions) (*v1a.StateList, error) {
	if mock.ListFunc == nil {
		panic("StateInterfaceMock.ListFunc: method is nil but StateInterface.List was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockStateInterfaceMockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	lockStateInterfaceMockList.Unlock()
	return mock.ListFunc(opts)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStateInterface.ListCalls())
func (mock *StateInterfaceMock) ListCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockStateInterfaceMockList.RLock()
	calls = mock.calls.List
	lockStateInterfaceMockList.RUnlock()
	return calls
}

// ObjectClient calls ObjectClientFunc.
func (mock *StateInterfaceMock) ObjectClient() *objectclient.ObjectClient {
	if mock.ObjectClientFunc == nil {
		panic("StateInterfaceMock.ObjectClientFunc: method is nil but StateInterface.ObjectClient was just called")
	}
	callInfo := struct {
	}{}
	lockStateInterfaceMockObjectClient.Lock()
	mock.calls.ObjectClient = append(mock.calls.ObjectClient, callInfo)
	lockStateInterfaceMockObjectClient.Unlock()
	return mock.ObjectClientFunc()
}

// ObjectClientCalls gets all the calls that were made to ObjectClient.
// Check the length with:
//     len(mockedStateInterface.ObjectClientCalls())
func (mock *StateInterfaceMock) ObjectClientCalls() []struct {
} {
	var calls []struct {
	}
	lockStateInterfaceMockObjectClient.RLock()
	calls = mock.calls.ObjectClient
	lockStateInterfaceMockObjectClient.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *StateInterfaceMock) Update(in1 *v1.State) (*v1.State, error) {
	if mock.UpdateFunc == nil {
		panic("StateInterfaceMock.UpdateFunc: method is nil but StateInterface.Update was just called")
	}
	callInfo := struct {
		In1 *v1.State
	}{
		In1: in1,
	}
	lockStateInterfaceMockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	lockStateInterfaceMockUpdate.Unlock()
	return mock.UpdateFunc(in1)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedStateInterface.UpdateCalls())
func (mock *StateInterfaceMock) UpdateCalls() []struct {
	In1 *v1.State
} {
	var calls []struct {
		In1 *v1.State
	}
	lockStateInterfaceMockUpdate.RLock()
	calls = mock.calls.Update
	lockStateInterfaceMockUpdate.RUnlock()
	return calls
}

// Watch calls WatchFunc.
func (mock *StateInterfaceMock) Watch(opts v1b.ListOptions) (watch.Interface, error) {
	if mock.WatchFunc == nil {
		panic("StateInterfaceMock.WatchFunc: method is nil but StateInterface.Watch was just called")
	}
	callInfo := struct {
		Opts v1b.ListOptions
	}{
		Opts: opts,
	}
	lockStateInterfaceMockWatch.Lock()
	mock.calls.Watch = append(mock.calls.Watch, callInfo)
	lockStateInterfaceMockWatch.Unlock()
	return mock.WatchFunc(opts)
}

// WatchCalls gets all the calls that were made to Watch.
// Check the length with:
//     len(mockedStateInterface.WatchCalls())
func (mock *StateInterfaceMock) WatchCalls() []struct {
	Opts v1b.ListOptions
} {
	var calls []struct {
		Opts v1b.ListOptions
	}
	lockStateInterfaceMockWatch.RLock()
	calls = mock.calls.Watch
	lockStateInterfaceMockWatch.RUnlock()
	return calls
}

var (
	lockStatesGetterMockStates sync.RWMutex
)

// Ensure, that StatesGetterMock does implement StatesGetter.
// If this is not the case, regenerate this file with moq.
var _ v1a.StatesGetter = &StatesGetterMock{}

// StatesGetterMock is a mock implementation of StatesGetter.
//
//     func TestSomethingThatUsesStatesGetter(t *testing.T) {
//
//         // make and configure a mocked StatesGetter
//         mockedStatesGetter := &StatesGetterMock{
//             StatesFunc: func(namespace string) v1a.StateInterface {
// 	               panic("mock out the States method")
//             },
//         }
//
//         // use mockedStatesGetter in code that requires StatesGetter
//         // and then make assertions.
//
//     }
type StatesGetterMock struct {
	// StatesFunc mocks the States method.
	StatesFunc func(namespace string) v1a.StateInterface

	// calls tracks calls to the methods.
	calls struct {
		// States holds details about calls to the States method.
		States []struct {
			// Namespace is the namespace argument value.
			Namespace string
		}
	}
}

// States calls StatesFunc.
func (mock *StatesGetterMock) States(namespace string) v1a.StateInterface {
	if mock.StatesFunc == nil {
		panic("StatesGetterMock.StatesFunc: method is nil but StatesGetter.States was just called")
	}
	callInfo := struct {
		Namespace string
	}{
		Namespace: namespace,
	}
	lockStatesGetterMockStates.Lock()
	mock.calls.States = append(mock.calls.States, callInfo)
	lockStatesGetterMockStates.Unlock()
	return mock.StatesFunc(namespace)
}

// StatesCalls gets all the calls that were made to States.
// Check the length with:
//     len(mockedStatesGetter.StatesCalls())
func (mock *StatesGetterMock) StatesCalls() []struct {
	Namespace string
} {
	var calls []struct {
		Namespace string
	}
	lockStatesGetterMockStates.RLock()
	calls = mock.calls.States
	lockStatesGetterMockStates.RUnlock()
	return calls
}
