// Job Params
// Provisioning Requirements: RANCHER_API_URL, RANCHER_TOKEN_KEY, HOSTNAME_PREFIX, WORKER_COUNT, AWS_AMI, AWS_AMI_USER
// Target Requirements: RANCHER_API_URL, RANCHER_TOKEN_KEY, CLUSTER_ID, PROJECT_ID

node {
  def job_name = "${JOB_NAME}"
  if (job_name.contains('/')) { 
    job_names = job_name.split('/')
    job_name = job_names[job_names.size() - 1] 
  }
  def testContainer = "${job_name}${env.BUILD_NUMBER}_test"

  def imageName = "rancher-validation-${job_name}${env.BUILD_NUMBER}"
  def envFile = ".env"
  def rancher_api_url = "${env.RANCHER_API_URL}"
  def rancher_token_key = "${env.RANCHER_TOKEN_KEY}"
  def tf_version = "${env.TF_VERSION}"
  def monitoring_version = "${env.RANCHER_MONITORING_V2_VERSION}"
  def logging_version = "${env.RANCHER_LOGGING_V2_VERSION}"
  def kiali_version = "${env.RANCHER_KIALI_V2_VERSION}"
  def istio_version = "${env.RANCHER_ISTIO_V2_VERSION}"
  def cis_version = "${env.RANCHER_CIS_V2_VERSION}"
  def gatekeeper_version = "${env.RANCHER_GATEKEEPER_V2_VERSION}"
  def backup_version = "${env.RANCHER_BACKUP_V2_VERSION}"
  def longhorn_version = "${env.RANCHER_LONGHORN_V2_VERSION}"
  def longhorn_prereq_version = "${env.RANCHER_LONGHORN_PREREQ_VERSION}"
  def cluster_id = "${env.cluster_id}"
  def project_id = "${env.project_id}"
  def hostname_prefix = "${env.HOSTNAME_PREFIX}"
  def worker_count = "${env.WORKER_COUNT}"
  def AWS_AMI = "${env.AWS_AMI}"
  def AWS_AMI_USER = "${env.AWS_AMI_USER}"
  def k8s_version = "${env.K8S_VERSION}"
  def suffix = "-tf-cluster-0"
  def etcd_suffix = "-tf-etcd-0"
  def cp_suffix = "-tf-controlplane-0"
  def worker_suffix = "-tf-worker-0"
  def aws_cluster_name = "-aws-tf-v2charts"
  def tracing_version = "${env.TRACING_VERSION}"
  def neuvector_version = "${env.NEUVECTOR_VERSION}"
  def rancher_version_26_or_higher = "${env.RANCHER_VERSION_26_OR_HIGHER}"
  def is_admin = "${env.IS_ADMIN}"
  def docker_install = "${env.DOCKER_INSTALL}"
  def k3s_install = "${env.K3S_INSTALL}"

  if ("${env.RANCHER_LONGHORN_PREREQ_VERSION}" == "null") {
    longhorn_prereq_version = ""
  }

  def branch = "release/v2.6"
  if ("${env.branch}" != "null" && "${env.branch}" != "") {
    branch = "${env.branch}"
  }

  wrap([$class: 'AnsiColorBuildWrapper', 'colorMapName': 'XTerm', 'defaultFg': 2, 'defaultBg':1]) {
    withFolderProperties {
      paramsMap = []
      params.each {
        paramsMap << "$it.key=$it.value"
      }
      withEnv(paramsMap) {
      withCredentials([ string(credentialsId: 'AWS_ACCESS_KEY_ID', variable: 'AWS_ACCESS_KEY_ID'),
                        string(credentialsId: 'AWS_SECRET_ACCESS_KEY', variable: 'AWS_SECRET_ACCESS_KEY'),
                        string(credentialsId: 'AWS_SSH_PEM_KEY', variable: 'AWS_SSH_PEM_KEY'),
                        string(credentialsId: 'ADMIN_PASSWORD', variable: 'ADMIN_PASSWORD'),
                        string(credentialsId: 'USER_PASSWORD', variable: 'USER_PASSWORD')
                        ]) {
                          
        stage('Checkout') {
          deleteDir()
          checkout([
                    $class: 'GitSCM',
                    branches: [[name: "*/${branch}"]],
                    extensions: scm.extensions + [[$class: 'CleanCheckout']],
                    userRemoteConfigs: scm.userRemoteConfigs
                  ])
        }

        dir ("./") {
          stage('Configure and Build') {
            if (env.AWS_SSH_PEM_KEY && env.AWS_SSH_KEY_NAME) {
              dir(".ssh") {
                def decoded = new String(AWS_SSH_PEM_KEY.decodeBase64())
                writeFile file: AWS_SSH_KEY_NAME, text: decoded
              }
            }

            sh "./tests/v2/validation/resource/terraform/v2charts/configure.sh"
            sh "./tests/v2/validation/resource/terraform/v2charts/build.sh"
          }

          try {
            stage('Run Chart Installation') {
                if (cluster_id == "") {
                    sh "docker run --name ${testContainer} -t --env-file ${envFile} " + 
                    "${imageName} sh -c \"export TF_VAR_rancher_api_url=${rancher_api_url}" + 
                    "&& export TF_VAR_rancher_token_key=${rancher_token_key}" + 
                    "&& export TF_VAR_aws_access_key=${AWS_ACCESS_KEY_ID}" + 
                    "&& export TF_VAR_aws_secret_key=${AWS_SECRET_ACCESS_KEY}" + 
                    "&& export provider=provision/aws" + 
                    "&& export tfversion=${tf_version}" + 
                    "&& export TF_VAR_cluster_name=${hostname_prefix}"+"$aws_cluster_name" + 
                    "&& export TF_VAR_hostname_prefix_etcd=${hostname_prefix}"+"$etcd_suffix" + 
                    "&& export TF_VAR_hostname_prefix_cp=${hostname_prefix}"+"$cp_suffix" + 
                    "&& export TF_VAR_hostname_prefix_worker=${hostname_prefix}"+"$worker_suffix" + 
                    "&& export TF_VAR_worker_count=${worker_count}" + 
                    "&& export TF_VAR_ami=${AWS_AMI}" +  
                    "&& export TF_VAR_ami_user=${AWS_AMI_USER}" + 
                    "&& export TF_VAR_k8s_version=${k8s_version}" +
                    "&& export TF_VAR_monitoring_version=${monitoring_version}" + 
                    "&& export TF_VAR_logging_version=${logging_version}" + 
                    "&& export TF_VAR_kiali_versiony=${kiali_version}" + 
                    "&& export TF_VAR_istio_version=${istio_version}" + 
                    "&& export TF_VAR_cis_version=${cis_version}" +
                    "&& export TF_VAR_longhorn_version=${longhorn_version}" + 
                    "&& export TF_VAR_longhorn_prereq_version=${longhorn_prereq_version}" + 
                    "&& export TF_VAR_backup_version=${backup_version}" + 
                    "&& export TF_VAR_gatekeeper_version=${gatekeeper_version}" +
                    "&& export TF_VAR_neuvector_version=${neuvector_version}" +
                    "&& export TF_VAR_tracing_version=${tracing_version}" +
                    "&& export TF_VAR_is_admin=${is_admin}" + 
                    "&& export TF_VAR_docker_install=${docker_install}" + 
                    "&& export TF_VAR_k3s_install=${k3s_install}" + 
                    "&& export TF_VAR_rancher_version_26_or_higher=${rancher_version_26_or_higher}" + 
                    "&& go run .\""
                } else {
                  sh "docker run --name ${testContainer} -t --env-file ${envFile} " + 
                  "${imageName} sh -c \"export TF_VAR_rancher_api_url=${rancher_api_url}" + 
                  "&& export TF_VAR_rancher_token_key=${rancher_token_key}" + 
                  "&& export provider=target" + 
                  "&& export TF_VAR_monitoring_version=${monitoring_version}" + 
                  "&& export TF_VAR_logging_version=${logging_version}" + 
                  "&& export TF_VAR_kiali_versiony=${kiali_version}" + 
                  "&& export TF_VAR_istio_version=${istio_version}" + 
                  "&& export TF_VAR_cis_version=${cis_version}" +
                  "&& export TF_VAR_longhorn_version=${longhorn_version}" +
                  "&& export TF_VAR_longhorn_prereq_version=${longhorn_prereq_version}" + 
                  "&& export TF_VAR_backup_version=${backup_version}" + 
                  "&& export TF_VAR_gatekeeper_version=${gatekeeper_version}" +
                  "&& export TF_VAR_neuvector_version=${neuvector_version}" +
                  "&& export TF_VAR_tracing_version=${tracing_version}" +
                  "&& export TF_VAR_cluster_id=${cluster_id}" + 
                  "&& export TF_VAR_project_id=${project_id}" + 
                  "&& export TF_VAR_is_admin=${is_admin}" + 
                  "&& export TF_VAR_docker_install=${docker_install}" + 
                  "&& export TF_VAR_k3s_install=${k3s_install}" + 
                  "&& export TF_VAR_rancher_version_26_or_higher=${rancher_version_26_or_higher}" + 
                  "&& export tfversion=${TF_VERSION}" + 
                  "&& go run .\""
                }
            }
          } catch(err) {
            echo 'Test run had failures. Collecting results...'
          }

          try {
            stage('Cleanup') {
              sh "docker rm -v ${testContainer}"
              sh "docker rmi ${imageName}"
            }
          } catch(err){
            sh "docker stop ${testContainer}"
            sh "docker rm -v ${testContainer}"
            sh "docker rmi ${imageName}"
          }
        }
      }
    }
  } 
  }
}